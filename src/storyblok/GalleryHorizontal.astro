---
import { storyblokEditable } from '@storyblok/astro'
import NetlifyImage from './utils/NetlifyImage.astro'
const { blok } = Astro.props
---

<section class="container" {...storyblokEditable(blok)}>
  <div class="drag-gallery js-drag-gallery">
    <ul class="drag-gallery__list">
      {
        blok.gallery?.map((img) => (
          <li class="drag-gallery__item">
            <NetlifyImage src={img.filename} alt={img.alt} />
          </li>
        ))
      }
    </ul>
    <div aria-hidden="true" class="drag-gallery__gesture-hint"></div>
  </div>
</section>

<style>
  @reference "../styles/tailwind.css";
  :root {
    --drag-gallery-img-width: 260px;
    --drag-gallery-img-gap: 2rem;
  }

  @supports (--css: variables) {
    @media (min-width: 48rem) {
      :root {
        --drag-gallery-img-width: 400px;
      }
    }
    @media (min-width: 64rem) {
      :root {
        --drag-gallery-img-width: 520px;
        --drag-gallery-img-gap: 3.125rem;
      }
    }
  }
  .drag-gallery {
    position: relative;
    overflow: hidden;
  }
  .drag-gallery:focus {
    outline: none;
  }

  .drag-gallery__list {
    display: flex;
    align-items: center;
    overflow: auto;
    @apply py-0 px-5 lg:px-8;
  }
  .drag-gallery__list::after {
    display: block;
    content: '';
    height: 1px;
    padding-right: inherit;
  }

  .drag-gallery__item {
    float: left;
    width: var(--drag-gallery-img-width);
    flex-shrink: 0;
    margin-right: var(--drag-gallery-img-gap);
  }
  .drag-gallery__item:last-child {
    margin-right: 0;
  }
  .drag-gallery__item :global(img) {
    display: block;
  }

  .drag-gallery__gesture-hint {
    width: 4em;
    height: 4em;
    background-color: rgba(0, 0, 0, 0.95);
    border-radius: 50%;
    position: absolute;
    top: calc(50% - 2em);
    left: calc(50% - 2em);
    display: none;
  }

  .drag-gallery {
    cursor: -webkit-grab;
    cursor: grab;
  }
  .drag-gallery--is-dragging {
    cursor: -webkit-grabbing;
    cursor: grabbing;
  }
  .drag-gallery__list {
    overflow: visible;
    will-change: transform;
    transform: translateZ(0);
    backface-visibility: hidden;
  }
  .drag-gallery__item {
    opacity: 0;
    transition: opacity 1.5s;
    user-select: none;
  }
  .drag-gallery__item :global(img) {
    pointer-events: none;
  }
  .drag-gallery__item--visible {
    opacity: 1;
  }
  .drag-gallery--anim-off .drag-gallery__item {
    opacity: 1;
  }
  .drag-gallery__gesture-hint {
    display: block;
    opacity: 0;
    -webkit-transform: translateX(0) scale(1);
    transform: translateX(0) scale(1);
  }
  .drag-gallery__gesture-hint--animate {
    -webkit-animation: drag-gallery-gesture-hint 2.8s;
    animation: drag-gallery-gesture-hint 2.8s;
  }

  @keyframes drag-gallery-gesture-hint {
    0%,
    60% {
      opacity: 0;
      -webkit-transform: translateX(0) scale(1);
      transform: translateX(0) scale(1);
    }
    5%,
    65% {
      opacity: 1;
      -webkit-transform: translateX(0) scale(1);
      transform: translateX(0) scale(1);
    }
    10%,
    70% {
      opacity: 1;
      -webkit-transform: translateX(0) scale(0.8);
      transform: translateX(0) scale(0.8);
    }
    30%,
    90% {
      opacity: 1;
      -webkit-transform: translateX(-200%) scale(0.8);
      transform: translateX(-200%) scale(0.8);
      t-animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
      animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
    }
    35%,
    95% {
      opacity: 1;
      -webkit-transform: translateX(-200%) scale(1);
      transform: translateX(-200%) scale(1);
    }
    40%,
    100% {
      opacity: 0;
      -webkit-transform: translateX(-200%) scale(1);
      transform: translateX(-200%) scale(1);
    }
  }
</style>

<script>
  import '../utils/swipe'
  // File#: _2_draggable-img-gallery
  // Usage: codyhouse.co/license
  ;(function () {
    var DragGallery = function (element) {
      this.element = element
      this.list = this.element.getElementsByTagName('ul')[0]
      this.imgs = this.list.children
      this.gestureHint = this.element.getElementsByClassName('drag-gallery__gesture-hint') // drag gesture hint
      this.galleryWidth = getGalleryWidth(this)
      this.translate = 0 // store container translate value
      this.dragStart = false // start dragging position
      // drag momentum option
      this.dragMStart = false
      this.dragTimeMStart = false
      this.dragTimeMEnd = false
      this.dragMSpeed = false
      this.dragAnimId = false
      initDragGalleryEvents(this)
    }

    function initDragGalleryEvents(gallery) {
      initDragging(gallery) // init dragging

      gallery.element.addEventListener('update-gallery-width', function (event) {
        // window resize
        gallery.galleryWidth = getGalleryWidth(gallery)
        // reset translate value if not acceptable
        checkTranslateValue(gallery)
        setTranslate(gallery)
      })

      if (intersectionObsSupported) initOpacityAnim(gallery) // init image animation

      if (!reducedMotion && gallery.gestureHint.length > 0) initHintGesture(gallery) // init hint gesture element animation

      initKeyBoardNav(gallery)
    }

    function getGalleryWidth(gallery) {
      return gallery.list.scrollWidth - gallery.list.offsetWidth
    }

    function initDragging(gallery) {
      // gallery drag
      new SwipeContent(gallery.element)
      gallery.element.addEventListener('dragStart', function (event) {
        window.cancelAnimationFrame(gallery.dragAnimId)
        gallery.element.classList.add('drag-gallery--is-dragging')
        gallery.dragStart = event.detail.x
        gallery.dragMStart = event.detail.x
        gallery.dragTimeMStart = new Date().getTime()
        gallery.dragTimeMEnd = false
        gallery.dragMSpeed = false
        initDragEnd(gallery)
      })

      gallery.element.addEventListener('dragging', function (event) {
        if (!gallery.dragStart) return
        if (Math.abs(event.detail.x - gallery.dragStart) < 5) return
        gallery.translate = Math.round(event.detail.x - gallery.dragStart + gallery.translate)
        gallery.dragStart = event.detail.x
        checkTranslateValue(gallery)
        setTranslate(gallery)
      })
    }

    function initDragEnd(gallery) {
      gallery.element.addEventListener('dragEnd', function cb(event) {
        gallery.element.removeEventListener('dragEnd', cb)
        gallery.element.classList.remove('drag-gallery--is-dragging')
        initMomentumDrag(gallery) // drag momentum
        gallery.dragStart = false
      })
    }

    function initKeyBoardNav(gallery) {
      gallery.element.setAttribute('tabindex', 0)
      // navigate gallery using right/left arrows
      gallery.element.addEventListener('keyup', function (event) {
        if ((event.keyCode && event.keyCode == 39) || (event.key && event.key.toLowerCase() == 'arrowright')) {
          keyboardNav(gallery, 'right')
        } else if ((event.keyCode && event.keyCode == 37) || (event.key && event.key.toLowerCase() == 'arrowleft')) {
          keyboardNav(gallery, 'left')
        }
      })
    }

    function keyboardNav(gallery, direction) {
      var delta = parseFloat(window.getComputedStyle(gallery.imgs[0]).marginRight) + gallery.imgs[0].offsetWidth
      gallery.translate = direction == 'right' ? gallery.translate - delta : gallery.translate + delta
      checkTranslateValue(gallery)
      setTranslate(gallery)
    }

    function checkTranslateValue(gallery) {
      // make sure translate is in the right interval
      if (gallery.translate > 0) {
        gallery.translate = 0
        gallery.dragMSpeed = 0
      }
      if (Math.abs(gallery.translate) > gallery.galleryWidth) {
        gallery.translate = gallery.galleryWidth * -1
        gallery.dragMSpeed = 0
      }
    }

    function setTranslate(gallery) {
      gallery.list.style.transform = 'translateX(' + gallery.translate + 'px)'
      gallery.list.style.msTransform = 'translateX(' + gallery.translate + 'px)'
    }

    function initOpacityAnim(gallery) {
      // animate img opacities on drag
      for (var i = 0; i < gallery.imgs.length; i++) {
        var observer = new IntersectionObserver(opacityCallback.bind(gallery.imgs[i]), { threshold: [0, 0.1] })
        observer.observe(gallery.imgs[i])
      }
    }

    function opacityCallback(entries, observer) {
      // reveal images when they enter the viewport
      var threshold = entries[0].intersectionRatio.toFixed(1)
      if (threshold > 0) {
        this.classList.add('drag-gallery__item--visible')
        observer.unobserve(this)
      }
    }

    function initMomentumDrag(gallery) {
      // momentum effect when drag is over
      if (reducedMotion) return
      var timeNow = new Date().getTime()
      gallery.dragMSpeed = (0.95 * (gallery.dragStart - gallery.dragMStart)) / (timeNow - gallery.dragTimeMStart)

      var currentTime = false

      function animMomentumDrag(timestamp) {
        if (!currentTime) currentTime = timestamp
        var progress = timestamp - currentTime
        currentTime = timestamp
        if (Math.abs(gallery.dragMSpeed) < 0.01) {
          gallery.dragAnimId = false
          return
        } else {
          gallery.translate = Math.round(gallery.translate + gallery.dragMSpeed * progress)
          checkTranslateValue(gallery)
          setTranslate(gallery)
          gallery.dragMSpeed = gallery.dragMSpeed * 0.95
          gallery.dragAnimId = window.requestAnimationFrame(animMomentumDrag)
        }
      }

      gallery.dragAnimId = window.requestAnimationFrame(animMomentumDrag)
    }

    function initHintGesture(gallery) {
      // show user a hint about gallery dragging
      var observer = new IntersectionObserver(hintGestureCallback.bind(gallery.gestureHint[0]), { threshold: [0, 1] })
      observer.observe(gallery.gestureHint[0])
    }

    function hintGestureCallback(entries, observer) {
      var threshold = entries[0].intersectionRatio.toFixed(1)
      if (threshold > 0) {
        this.classList.add('drag-gallery__gesture-hint--animate')
        this.addEventListener('animationend', (event) => {
          this.classList.remove('drag-gallery__gesture-hint--animate')
        })
        //observer.unobserve(this)
      }
    }

    //initialize the DragGallery objects
    var dragGallery = document.getElementsByClassName('js-drag-gallery'),
      intersectionObsSupported =
        'IntersectionObserver' in window &&
        'IntersectionObserverEntry' in window &&
        'intersectionRatio' in window.IntersectionObserverEntry.prototype,
      reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches

    if (dragGallery.length > 0) {
      var dragGalleryArray = []
      for (var i = 0; i < dragGallery.length; i++) {
        ;(function (i) {
          if (!intersectionObsSupported || reducedMotion) dragGallery[i].classList.add('drag-gallery--anim-off')
          dragGalleryArray.push(new DragGallery(dragGallery[i]))
        })(i)
      }

      // resize event
      var resizingId = false,
        customEvent = new CustomEvent('update-gallery-width')

      window.addEventListener('resize', function () {
        clearTimeout(resizingId)
        resizingId = setTimeout(doneResizing, 500)
      })

      function doneResizing() {
        for (var i = 0; i < dragGalleryArray.length; i++) {
          ;(function (i) {
            dragGalleryArray[i].element.dispatchEvent(customEvent)
          })(i)
        }
      }
    }
  })()
</script>
