---
import { storyblokEditable } from '@storyblok/astro'
import NetlifyImage from './utils/NetlifyImage.astro'
const { blok } = Astro.props
---

<section class="container" {...storyblokEditable(blok)} data-aos="fade-up" data-aos-duration="1500">
  <div class="masonry max-w-full js-masonry">
    <div class="masonry__loader" aria-hidden="true">
      <svg
        class="icon inline-block text-inherit fill-current leading-none shrink-0 w-[32px] h-[32px] icon--is-spinning"
        viewBox="0 0 32 32">
        <g stroke-linecap="square" stroke-linejoin="miter" stroke-width="2" stroke="currentColor" fill="none">
          <circle cx="16" cy="16" r="15" opacity="0.4"></circle><path d="M16,1A15,15,0,0,1,31,16" stroke-linecap="butt">
          </path>
        </g>
      </svg>
    </div>

    <ul class="masonry__list js-masonry__list">
      {
        blok.gallery?.map((img) => (
          <li class="masonry__item js-masonry__item">
            <NetlifyImage
              src={img.filename}
              alt={img.alt}
              class="block w-full rounded-[var(--radius-box)]"
              loading={blok.image.loading === 'eager' ? 'eager' : 'lazy'}
            />
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>
  :root {
    --masonry-grid-gap: 0.75rem;
    --masonry-col-auto-size: 280px;
  }
  @media (min-width: 64rem) {
    :root {
      --masonry-grid-gap: 1.125rem;
    }
  }

  .masonry__list {
    display: flex;
    flex-wrap: wrap;
    margin-right: calc(-1 * var(--masonry-grid-gap));
    margin-bottom: calc(-1 * var(--masonry-grid-gap));
  }

  .masonry__item {
    display: inline-block;
    width: var(--masonry-col-auto-size);
    margin-right: var(--masonry-grid-gap);
    margin-bottom: var(--masonry-grid-gap);
  }

  .masonry {
    position: relative;
  }
  .masonry__loader {
    display: block;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    top: 0;
  }
  .masonry__list {
    opacity: 0;
    transition: opacity 0.4s;
  }
  .masonry--loaded .masonry__loader {
    display: none;
  }
  .masonry--loaded .masonry__list {
    opacity: 1;
  }
  @supports (flex-basis: 0px) {
    .masonry__list {
      flex-direction: column;
    }
    .masonry__item {
      flex-basis: 0px;
    }
  }

  /* icon loading animation */
  .icon--is-spinning {
    animation: icon-spin 1s infinite linear;
  }

  @keyframes icon-spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  ;(function () {
    var Masonry = function (element) {
      this.element = element
      this.list = this.element.getElementsByClassName('js-masonry__list')[0]
      this.items = this.element.getElementsByClassName('js-masonry__item')
      this.activeColumns = 0
      this.colStartWidth = 0 // col min-width (defined in CSS using --masonry-col-auto-size variable)
      this.colWidth = 0 // effective column width
      this.colGap = 0
      // store col heights and items
      this.colHeights = []
      this.colItems = []
      // flex full support
      this.flexSupported = checkFlexSupported(this.items[0])
      getGridLayout(this) // get initial grid params
      setGridLayout(this) // set grid params (width of elements)
      initMasonryLayout(this) // init gallery layout
    }

    function checkFlexSupported(item) {
      var itemStyle = window.getComputedStyle(item)
      return itemStyle.getPropertyValue('flex-basis') != 'auto'
    }

    function getGridLayout(grid) {
      // this is used to get initial grid details (width/grid gap)
      var itemStyle = window.getComputedStyle(grid.items[0])
      if (grid.colStartWidth == 0) {
        grid.colStartWidth = parseFloat(itemStyle.getPropertyValue('width'))
      }
      grid.colGap = parseFloat(itemStyle.getPropertyValue('margin-right'))
    }

    function setGridLayout(grid) {
      // set width of items in the grid
      var containerWidth = parseFloat(window.getComputedStyle(grid.element).getPropertyValue('width'))
      grid.activeColumns = parseInt((containerWidth + grid.colGap) / (grid.colStartWidth + grid.colGap))
      if (grid.activeColumns == 0) grid.activeColumns = 1
      grid.colWidth = parseFloat((containerWidth - (grid.activeColumns - 1) * grid.colGap) / grid.activeColumns)
      for (var i = 0; i < grid.items.length; i++) {
        grid.items[i].style.width = grid.colWidth + 'px' // reset items width
      }
    }

    function initMasonryLayout(grid) {
      if (grid.flexSupported) {
        checkImgLoaded(grid) // reset layout when images are loaded
      } else {
        grid.element.classList.add('masonry--loaded') // make sure the gallery is visible
      }

      grid.element.addEventListener('masonry-resize', function () {
        // window has been resized -> reset masonry layout
        getGridLayout(grid)
        setGridLayout(grid)
        if (grid.flexSupported) layItems(grid)
      })

      grid.element.addEventListener('masonry-reset', function (event) {
        // reset layout (e.g., new items added to the gallery)
        getGridLayout(grid)
        setGridLayout(grid)
        if (grid.flexSupported) checkImgLoaded(grid)
      })

      // if there are fonts to be loaded -> reset masonry
      if (document.fonts) {
        document.fonts.onloadingdone = function (fontFaceSetEvent) {
          if (!grid.masonryLaid) return
          getGridLayout(grid)
          setGridLayout(grid)
          if (grid.flexSupported) layItems(grid)
        }
      }
    }

    function layItems(grid) {
      grid.element.classList.add('masonry--loaded') // make sure the gallery is visible
      grid.colHeights = []
      grid.colItems = []

      // grid layout has already been set -> update container height and order of items
      for (var j = 0; j < grid.activeColumns; j++) {
        grid.colHeights.push(0) // reset col heights
        grid.colItems[j] = [] // reset items order
      }

      for (var i = 0; i < grid.items.length; i++) {
        var minHeight = Math.min.apply(Math, grid.colHeights),
          index = grid.colHeights.indexOf(minHeight)
        if (grid.colItems[index]) grid.colItems[index].push(i)
        grid.items[i].style.flexBasis = 0 // reset flex basis before getting height
        var itemHeight = grid.items[i].getBoundingClientRect().height || grid.items[i].offsetHeight || 1
        grid.colHeights[index] = grid.colHeights[index] + grid.colGap + itemHeight
      }

      // reset height of container
      var masonryHeight = Math.max.apply(Math, grid.colHeights) + 5
      grid.list.style.cssText = 'height: ' + masonryHeight + 'px;'

      // go through elements and set flex order
      var order = 0
      for (var i = 0; i < grid.colItems.length; i++) {
        for (var j = 0; j < grid.colItems[i].length; j++) {
          grid.items[grid.colItems[i][j]].style.order = order
          order = order + 1
        }
        // change flex-basis of last element of each column, so that next element shifts to next col
        var lastItemCol = grid.items[grid.colItems[i][grid.colItems[i].length - 1]]
        if (lastItemCol)
          lastItemCol.style.flexBasis =
            masonryHeight - grid.colHeights[i] + lastItemCol.getBoundingClientRect().height - 5 + 'px'
      }

      grid.masonryLaid = true
      // emit custom event when grid has been reset
      grid.element.dispatchEvent(new CustomEvent('masonry-laid'))
    }

    function checkImgLoaded(grid) {
      var imgs = grid.list.getElementsByTagName('img')

      function countLoaded() {
        var setTimeoutOn = false
        for (var i = 0; i < imgs.length; i++) {
          if (imgs[i].complete && imgs[i].naturalHeight == 0) {
            continue // broken image -> skip
          }

          if (!imgs[i].complete) {
            setTimeoutOn = true
            break
          } else if (typeof imgs[i].naturalHeight !== 'undefined' && imgs[i].naturalHeight == 0) {
            setTimeoutOn = true
            break
          }
        }

        if (!setTimeoutOn) {
          layItems(grid)
        } else {
          setTimeout(function () {
            countLoaded()
          }, 100)
        }
      }

      if (imgs.length == 0) {
        layItems(grid) // no need to wait -> no img available
      } else {
        countLoaded()
      }
    }

    //initialize the Masonry objects
    var masonries = document.getElementsByClassName('js-masonry'),
      flexSupported = CSS.supports('flex-basis', 'auto'),
      masonriesArray = []

    if (masonries.length > 0) {
      for (var i = 0; i < masonries.length; i++) {
        if (!flexSupported) {
          masonries[i].classList.add('masonry--loaded') // reveal gallery
        } else {
          ;(function (i) {
            masonriesArray.push(new Masonry(masonries[i]))
          })(i) // init Masonry Layout
        }
      }

      if (!flexSupported) return

      // listen to window resize -> reorganize items in gallery
      var resizingId = false,
        customEvent = new CustomEvent('masonry-resize')

      window.addEventListener('resize', function () {
        clearTimeout(resizingId)
        resizingId = setTimeout(doneResizing, 500)
      })

      function doneResizing() {
        for (var i = 0; i < masonriesArray.length; i++) {
          ;(function (i) {
            masonriesArray[i].element.dispatchEvent(customEvent)
          })(i)
        }
      }
    }
  })()
</script>
