---
import { storyblokEditable } from '@storyblok/astro'
import RichText from './utils/RichText.astro'
import { useStoryblokApi } from '@storyblok/astro'
import isPreview from '../utils/isPreview'
import NetlifyImage from './utils/NetlifyImage.astro'

const { blok } = Astro.props

const storyblokApi = useStoryblokApi()
const { data } = await storyblokApi.get('cdn/stories/', {
  version: isPreview() ? 'draft' : 'published',
  starts_with: 'blog/',
  is_startpage: false
})

data.stories.sort(function (a, b) {
  // Turn your strings into dates, and then subtract them
  // to get a value that is either negative, positive, or zero.
  return new Date(b.content.creationDate || b.created_at) - new Date(a.content.creationDate || a.created_at)
})

let itemPerPage = blok.itemPerPage || 3

if (data.stories.length > itemPerPage) {
  data.hasPagination = true
} else {
  data.hasPagination = false
}
---

<section class="relative z-[1] container" {...storyblokEditable(blok)} data-aos="fade-up" data-pagination={itemPerPage}>
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
    <div class="max-w-xl lg:text-balance">
      <RichText content={blok.title} />
    </div>
    <div class="relative flex flex-col gap-12 lg:col-span-2">
      {
        data.stories.map((article, idx) => (
          <article
            data-idx={idx}
            class={`relative flex flex-col isolate gap-8 lg:flex-row group ${idx > itemPerPage - 1 ? 'hidden' : ''}`}>
            <div class="relative aspect-[16/9] sm:aspect-[2/1] lg:aspect-square lg:w-64 lg:shrink-0">
              {article.content.image && (
                <NetlifyImage
                  src={article.content.image.filename}
                  alt={article.content.image.alt}
                  class="absolute inset-0 object-cover size-full rounded-2xl"
                />
              )}
            </div>
            <div class="flex flex-col justify-between">
              <div>
                <a class="mt-4" href={'/' + article.full_slug}>
                  <div class="text-lg lg:text-2xl font-bold group-hover:text-accent duration-200">
                    <span class="absolute inset-0" />
                    {article.content.titreArticle}
                  </div>
                </a>
                <div class="mt-4 text-base font-light line-clamp-3">
                  <RichText content={article.content.abstract} />
                </div>
              </div>
              <div class="relative flex items-center mt-4 gap-x-4">
                <div>
                  {article.content.author && <p>{article.content.author}</p>}

                  {article.content.creationDate && (
                    <div>
                      <span class="sr-only">{new Date(article.content.creationDate).toLocaleDateString()}</span>
                      <p class="text-sm font-medium uppercase">
                        <time datetime={new Date(article.content.creationDate).toLocaleDateString()}>
                          {new Date(article.content.creationDate).toLocaleDateString()}
                        </time>
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
  {
    data.hasPagination && (
      <section>
        <div class="flex justify-center w-full px-8 mx-auto md:px-12 lg:px-24 max-w-7xl">
          <nav class="flex items-center justify-center w-full px-4 sm:px-0 gap-4">
            <button id="blogPrev" class={`btn btn-primary`}>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="icon icon-tabler-chevron-left size-4"
                slot="left-icon">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M15 6l-6 6l6 6" />
              </svg>
              Précédent
            </button>

            <button id="blogNext" class={`btn btn-primary `}>
              Suivant
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="icon icon-tabler-chevron-right size-4"
                slot="right-icon">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M9 6l6 6l-6 6" />
              </svg>
            </button>
          </nav>
        </div>
      </section>
    )
  }
</section>

<script>
  const blogPrev = document.getElementById('blogPrev')
  const blogNext = document.getElementById('blogNext')
  const articles = document.querySelectorAll('article[data-idx]')
  const itemPerPage = document.querySelector('section[data-pagination]').getAttribute('data-pagination')
  let currentPage = 0

  function showArticles() {
    articles.forEach((article, idx) => {
      if (idx >= currentPage * itemPerPage && idx < (currentPage + 1) * itemPerPage) {
        article.classList.remove('hidden')
      } else {
        article.classList.add('hidden')
      }
    })
  }

  function updateButtons() {
    if (currentPage === 0) {
      blogPrev.classList.add('btn-disabled')
    } else {
      blogPrev.classList.remove('btn-disabled')
    }
    if ((currentPage + 1) * itemPerPage >= articles.length) {
      blogNext.classList.add('btn-disabled')
    } else {
      blogNext.classList.remove('btn-disabled')
    }
  }

  blogPrev.addEventListener('click', () => {
    console.log(currentPage)
    if (currentPage > 0) {
      currentPage--
      showArticles()
      updateButtons()
    }
  })
  blogNext.addEventListener('click', () => {
    console.log(currentPage)

    if ((currentPage + 1) * itemPerPage < articles.length) {
      currentPage++
      showArticles()
      updateButtons()
    }
  })
</script>
